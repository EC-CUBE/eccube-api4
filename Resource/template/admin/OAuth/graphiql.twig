{% extends '@admin/default_frame.twig' %}

{% set menus = ['setting', 'api', 'graphiql'] %}

{% block title %}{% endblock %}
{% block sub_title %}{% endblock %}

{% block stylesheet %}
    <link href="https://unpkg.com/graphiql/graphiql.min.css" rel="stylesheet" />
    <style type="text/css" media="screen">
      .c-pageTitle {
          display: none;
      }
    </style>
{% endblock %}

{% block javascript %}
    <script
      crossorigin
      src="https://unpkg.com/react/umd/react.production.min.js"
    ></script>
    <script
      crossorigin
      src="https://unpkg.com/react-dom/umd/react-dom.production.min.js"
    ></script>
    <script
      crossorigin
      src="https://unpkg.com/graphiql/graphiql.min.js"
    ></script>

    <script>
      const defaultQuery =`query {
  # 商品一覧を取得
  products(limit: 5, page: 1) {
    edges {
      node {
        id
        name
        ProductClasses {
          id
          code
          price02
          stock
        }
        Status {
          id
          name
        }
        Creator {
          id
        }
        ProductTag {
          id
        }
      }
    }
    nodes {
      id
      name
      ProductClasses {
        id
        code
        price02
        stock
      }
      Status {
        id
        name
      }
      Creator {
        id
      }
      ProductTag {
        id
      }
    }
    totalCount
    pageInfo {
      hasNextPage
      hasPreviousPage
    }
  }

  # ID指定で商品情報を取得
  product(id: 1) {
    id
    name
  }

  # 受注一覧を取得
  orders(limit: 5, page: 1) {
    edges {
      node {
        id
        pre_order_id
        name01
        name02
        message
        OrderItems {
          id
          product_name
          price
        }
        Shippings {
          id
        }
      }
    }
    nodes {
      id
      pre_order_id
      name01
      name02
      message
      OrderItems {
        id
        product_name
        price
      }
      Shippings {
        id
      }
    }
    totalCount
    pageInfo {
      hasNextPage
      hasPreviousPage
    }
  }

  # ID指定で受注情報を取得
  order(id: 1) {
    id
    order_no
  }

  # 会員一覧を取得
  customers(limit: 5, page: 1) {
    edges {
      node {
        name01
        name02
        email
        point
      }
    }
    nodes {
      name01
      name02
      email
      point
    }
    totalCount
    pageInfo {
      hasNextPage
      hasPreviousPage
    }
  }

  # ID指定で会員情報を取得
  customer(id:1) {
    id
    name01
    name02
  }
}
`;
      const graphQLFetcher = graphQLParams =>
        fetch('{{ url('admin_api_graphiql_api') }}', {
          method: 'post',
          headers: {
            'Content-Type': 'application/json',
            'ECCUBE-CSRF-TOKEN': '{{ csrf_token(constant('Eccube\\Common\\Constant::TOKEN_NAME')) }}'
          },
          body: JSON.stringify(graphQLParams),
        })
          .then(response => response.json())
          .catch(() => response.text());
      ReactDOM.render(
        React.createElement(GraphiQL, { fetcher: graphQLFetcher, defaultQuery: defaultQuery }),
        document.getElementById('graphiql'),
      );
    </script>
{% endblock javascript %}

{% block main %}
    <div id="graphiql" style="height: calc(100vh - 65px);"></div>
{% endblock %}
